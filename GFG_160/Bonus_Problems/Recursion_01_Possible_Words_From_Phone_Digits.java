package GFG_160.Bonus_Problems;/*
 *
 * https://www.geeksforgeeks.org/problems/possible-words-from-phone-digits-1587115620/1
 *
 * # Possible Words From Phone Digits
 *
 *   Q. Given a keypad as shown in the diagram, and an array arr[ ], your task is to list all possible
 *      words in any order that can be generated by pressing numbers from the array.
 *              ==================================
 *              |          |          |          |
 *              |    (1)   |    (2)   |    (3)   |
 *              |          |   A B C  |   D E F  |
 *              |----------|----------|----------|
 *              |    (4)   |    (5)   |    (6)   |
 *              |   G H I  |   J K L  |   M N O  |
 *              |----------|----------|----------|
 *              |    (7)   |    (8)   |    (9)   |
 *              |  P Q R S |   T U V  |  W X Y Z |
 *              |----------|----------|----------|
 *              |    (‚Åï)   |    (0)   |    (#)   |
 *              |          |          |          |
 *              ==================================
 *    Ex.
 *      Input : arr[] = [3, 4, 5]
 *      Output: dgj dgk dgl dhj dhk dhl dij dik dil egj egk egl ehj ehk ehl eij eik eil fgj fgk fgl fhj
 *              fhk fhl fij fik fil
 *      Explanation: When we press 3, 4, 5 total possible words are 3 x 3 x 3 = 27.
 *
 */
import java.util.ArrayList;
import java.util.Scanner;

public class Recursion_01_Possible_Words_From_Phone_Digits {

    /// main Method
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Size: ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        System.out.println("Elements: ");
        for (int i = 0; i < n;i++)
            arr[i] = sc.nextInt();

        System.out.println(possibleWords(arr));
    }

    /// Solution
    static ArrayList<String> possibleWords(int[] arr) {
        // potd.code.hub
        int n = arr.length;
        ArrayList<String> list = new ArrayList<>();
        String[] db = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        possible(arr, list, db, 0, n, new StringBuilder());

        return list;
    }
    private static void possible(int[]arr, ArrayList<String>ans, String[]db, int i, int n, StringBuilder word){
        // base Case
        if (i == n){
            ans.add(word.toString());
            return;
        }
        String temp = db[arr[i]];
        for (int j = 0;j < temp.length();j++) {
            possible(arr, ans, db, i + 1, n, word.append(temp.charAt(j)));
            word.deleteCharAt(word.length()-1);
        }
    }
}
